swagger: '2.0'
info:
  version: 0.0.1
  title: T-Mobile Hyper Directory APIs
  description: T-Mobile Hyper Directory APIs
host: api.hyper-directory.t-mobile.com
basePath: /api
schemes:
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
consumes:
  - application/json
produces:
  - application/json
paths:
  /authorization:
    post:
      description: >-
        Obtains an authorization token from the server for a registered user
      parameters:
        - name: authInfo
          in: body
          description: Authorization info to be authenticated by the server
          required: true
          schema:
            $ref: '#/definitions/authInfo'
      responses:
        '200':
          description: Success response with authorization token
          schema:
            properties:
              data:
                properties:
                  authorization:
                    $ref: '#/definitions/authToken'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  /proposals:
    get:
      security:
        - Bearer: []
      description: Fetches complete details of all proposals in state
      parameters:
        - $ref: '#/parameters/head'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Response with a list of proposals
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/proposal'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
              paging:
                $ref: '#/definitions/paging'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/proposals/{id}':
    parameters:
      - $ref: '#/parameters/proposalId'
    get:
      security:
        - Bearer: []
      description: Fetches the complete details of a proposal
      parameters:
        - $ref: '#/parameters/head'
      responses:
        '200':
          description: Response with the fetched proposal
          schema:
            properties:
              data:
                $ref: '#/definitions/proposal'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    patch:
      security:
        - Bearer: []
      description: Updates the status or metadata of a proposal
      parameters:
        - name: update
          in: body
          description: Update information for the proposal
          required: true
          schema:
            $ref: '#/definitions/proposalUpdate'
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  /roles:
    get:
      security:
        - Bearer: []
      description: Fetches the complete details of all roles in state
      parameters:
        - $ref: '#/parameters/head'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Response with a list of roles
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/role'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
              paging:
                $ref: '#/definitions/paging'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    post:
      security:
        - Bearer: []
      description: Creates a new role in the system
      parameters:
        - name: role
          in: body
          description: Role to add to the system
          required: true
          schema:
            $ref: '#/definitions/newRole'
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/roles/{id}':
    parameters:
      - $ref: '#/parameters/roleId'
    get:
      security:
        - Bearer: []
      description: Fetches the complete details of a role
      parameters:
        - $ref: '#/parameters/head'
      responses:
        '200':
          description: Response with the fetched role
          schema:
            properties:
              data:
                $ref: '#/definitions/role'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    patch:
      security:
        - Bearer: []
      description: Update one or more attributes on a particular role
      parameters:
        - name: roleUpdate
          in: body
          description: Update information for the role
          required: true
          schema:
            $ref: '#/definitions/roleUpdate'
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/roles/{id}/admins':
    parameters:
      - $ref: '#/parameters/roleId'
    post:
      security:
        - Bearer: []
      description: Add an administrator to a role
      parameters:
        - name: administrator
          in: body
          description: User to be added as an administrator to the role
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: >-
                  Id of the user to add as an administrator to this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      security:
        - Bearer: []
      description: Remove an administrator from a role
      parameters:
        - name: administrator
          in: body
          description: User to be removed from the role's administrator list
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: >-
                  Id of the user to remove as administrator from this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/roles/{id}/members':
    parameters:
      - $ref: '#/parameters/roleId'
    post:
      security:
        - Bearer: []
      description: Add a member to a role
      parameters:
        - name: member
          in: body
          description: User to be added to the role
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to be add as member to this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      security:
        - Bearer: []
      description: Remove a member from the role
      parameters:
        - name: member
          in: body
          description: User to be removed from the role
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to remove as member to this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/roles/{id}/owners':
    parameters:
      - $ref: '#/parameters/roleId'
    post:
      security:
        - Bearer: []
      description: Add an owner to a role
      parameters:
        - name: owner
          in: body
          description: User to be added as an owner to the role
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to be add as an owner to this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      security:
        - Bearer: []
      description: Remove an owner from a role
      parameters:
        - name: member
          in: body
          description: User to be removed from the role's owner list
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to remove as owner from this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/roles/{id}/tasks':
    parameters:
      - $ref: '#/parameters/roleId'
    post:
      security:
        - Bearer: []
      description: Add a task to a role
      parameters:
        - name: task
          in: body
          description: Task to be added to the role
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the task to add to this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      security:
        - Bearer: []
      description: Remove a task from the role
      parameters:
        - name: member
          in: body
          description: Task to be removed from the role
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the task to remove from this role
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  /tasks:
    get:
      security:
        - Bearer: []
      description: Fetches the details of all tasks in state
      parameters:
        - $ref: '#/parameters/head'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Response with a list of tasks
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/task'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
              paging:
                $ref: '#/definitions/paging'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    post:
      security:
        - Bearer: []
      description: Creates a new task in the system
      parameters:
        - name: task
          in: body
          description: Task to add to the system
          required: true
          schema:
            $ref: '#/definitions/newTask'
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/tasks/{id}':
    parameters:
      - $ref: '#/parameters/taskId'
    get:
      security:
        - Bearer: []
      description: Fetches the complete details of a task
      parameters:
        - $ref: '#/parameters/head'
      responses:
        '200':
          description: Response with the fetched task
          schema:
            properties:
              data:
                $ref: '#/definitions/task'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    patch:
      security:
        - Bearer: []
      description: Update one or more attributes on a particular task
      parameters:
        - name: taskUpdate
          in: body
          description: The task attributes to update
          required: true
          schema:
            $ref: '#/definitions/taskUpdate'
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/tasks/{id}/admins':
    parameters:
      - $ref: '#/parameters/taskId'
    post:
      security:
        - Bearer: []
      description: Add an administrator to a particular task
      parameters:
        - name: administrator
          in: body
          description: User to be added as an administrator to the task
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to add as an administrator
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      security:
        - Bearer: []
      description: Remove an administrator from a particular task
      parameters:
        - name: member
          in: body
          description: User to be removed from the task's administrator list
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to remove as an administrator
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/tasks/{id}/owners':
    parameters:
      - $ref: '#/parameters/taskId'
    post:
      security:
        - Bearer: []
      description: Add an owner to a particular task
      parameters:
        - name: owner
          in: body
          description: User to be added as an owner to the task
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to be add as an owner
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    delete:
      security:
        - Bearer: []
      description: Remove an owner from a particular task
      parameters:
        - name: member
          in: body
          description: User to be removed from the role's owner list
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the user to remove as an owner
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  /users:
    get:
      security:
        - Bearer: []
      description: Fetches details for all users in state
      parameters:
        - $ref: '#/parameters/head'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Response with a list of users
          schema:
            properties:
              data:
                $ref: '#/definitions/user'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
              paging:
                $ref: '#/definitions/paging'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    post:
      description: Creates a new user in the system.
      parameters:
        - name: user
          in: body
          description: User to add to the system
          required: true
          schema:
            $ref: '#/definitions/newUser'
      responses:
        '200':
          description: Success response with authorization token
          schema:
            properties:
              data:
                properties:
                  authorization:
                    $ref: '#/definitions/authToken'
                  user:
                    $ref: '#/definitions/user'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/users/{id}':
    parameters:
      - $ref: '#/parameters/userId'
    get:
      security:
        - Bearer: []
      description: Fetches complete details of a particular user
      parameters:
        - $ref: '#/parameters/head'
      responses:
        '200':
          description: Response with the fetched user
          schema:
            properties:
              data:
                $ref: '#/definitions/user'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
    patch:
      security:
        - Bearer: []
      description: Update one or more attributes on a particular user
      parameters:
        - name: userUpdate
          in: body
          description: User attributes to update
          required: true
          schema:
            $ref: '#/definitions/userUpdate'
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/users/{id}/manager':
    parameters:
      - $ref: '#/parameters/userId'
    put:
      security:
        - Bearer: []
      description: Update a user with the new manager
      parameters:
        - name: manager
          in: body
          description: Id of the new manager for this user
          required: true
          schema:
            type: object
            properties:
              id:
                type: string
                description: Id of the new manager for this user
      responses:
        '200':
          description: Generic success response
          schema:
            $ref: '#/definitions/success'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/users/{id}/proposals/open':
    parameters:
      - $ref: '#/parameters/userId'
    get:
      security:
        - Bearer: []
      description: Get list of open proposals assigned to a particular user
      parameters:
        - $ref: '#/parameters/head'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Response with a list of open proposals
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/proposal'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
              paging:
                $ref: '#/definitions/paging'
        '400':
          description: Response for a bad request
          schema:
            $ref: '#/definitions/400Error'
        '401':
          description: Response for an unauthorized request
          schema:
            $ref: '#/definitions/401Error'
        '403':
          description: Response for a forbidden request
          schema:
            $ref: '#/definitions/403Error'
        '404':
          description: Response for object not found
          schema:
            $ref: '#/definitions/404Error'
        '503':
          description: Response for an internal unknown error
          schema:
            $ref: '#/definitions/503Error'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  /blocks:
    get:
      security:
        - Bearer: []
      description: Fetches info for all blocks in the current chain
      parameters:
        - $ref: '#/parameters/head'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/limit'
      responses:
        '200':
          description: Response with a list of block info
          schema:
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/block'
              head:
                $ref: '#/definitions/head'
              link:
                $ref: '#/definitions/link'
              paging:
                $ref: '#/definitions/paging'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  /blocks/latest:
    get:
      security:
        - Bearer: []
      description: Fetches info for the latest block in the chain
      responses:
        '200':
          description: Response with the latest block info
          schema:
            properties:
              data:
                $ref: '#/definitions/block'
              link:
                $ref: '#/definitions/link'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
  '/blocks/{id}':
    parameters:
      - name: id
        in: path
        description: Id of the block being fetched
        required: true
        type: string
    get:
      security:
        - Bearer: []
      description: Fetches info for a particular block
      responses:
        '200':
          description: Response with the fetched block info
          schema:
            properties:
              data:
                $ref: '#/definitions/block'
              link:
                $ref: '#/definitions/link'
        default:
          description: Response for an unexpected error
          schema:
            $ref: '#/definitions/error'
parameters:
  head:
    name: head
    in: query
    type: string
    default: latest
    description: The id of the block to use as the chain head
  start:
    name: start
    in: query
    type: integer
    default: 0
    description: The index of the resource to start a page with
  limit:
    name: limit
    in: query
    type: integer
    default: 100
    description: The maximum number of resources to return per page
  proposalId:
    name: id
    in: path
    description: Id of a particular proposal in state
    required: true
    type: string
  roleId:
    name: id
    in: path
    description: Id of a particular role in state
    required: true
    type: string
  taskId:
    name: id
    in: path
    description: Id of a particular task in state
    required: true
    type: string
  userId:
    name: id
    in: path
    description: Id of a particular user in state
    required: true
    type: string
definitions:
  head:
    type: string
    example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd
  link:
    type: string
    example: https://api.hyper-directory.t-mobile.com/proposals?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd
  paging:
    properties:
      start:
        type: integer
        example: 200
      limit:
        type: integer
        example: 100
      total:
        type: integer
        example: 54321
      first:
        type: string
        example: https://api.hyper-directory.t-mobile.com/tasks?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd&start=0&limit=100
      prev:
        type: string
        example: https://api.hyper-directory.t-mobile.com/tasks?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd&start=100&limit=100
      next:
        type: string
        example: https://api.hyper-directory.t-mobile.com/tasks?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd&start=300&count=100
      last:
        type: string
        example: https://api.hyper-directory.t-mobile.com/tasks?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd&start=54300&limit=100
  role:
    description: A collection of tasks and members authorized for those tasks
    type: object
    required:
      - id
      - name
      - owners
    properties:
      id:
        type: string
        description: Id of the role
      name:
        type: string
        description: Name of the role
      owners:
        type: array
        description: List of role owner ids
        items:
          type: string
      administrators:
        type: array
        description: List of role administrator ids
        items:
          type: string
      members:
        type: array
        description: List of users ids authorized by this role
        items:
          type: string
      tasks:
        type: array
        description: List of ids for tasks grouped by this role
        items:
          type: string
      proposals:
        type: array
        description: List of ids for open proposals for this role
        items:
          type: string
      metadata:
        type: string
        description: Any client supplied metadata
  newRole:
    type: object
    description: Details provided to create a new role
    required:
      - name
      - owners
      - administrators
    properties:
      name:
        type: string
        description: Name of the role
      owners:
        type: array
        description: List of owner ids
        items:
          type: string
      administrators:
        type: array
        description: List of administrator ids
        items:
          type: string
      metadata:
        type: string
        description: Any client supplied metadata
  roleUpdate:
    description: Details provided to update an existing role
    type: object
    properties:
      name:
        type: string
        description: A new name for the role
      metadata:
        type: string
        description: Any new client supplied metadata
  task:
    type: object
    description: A specific permission in the system
    required:
      - id
      - name
      - administrators
    properties:
      id:
        type: string
        description: Id of the task
      name:
        type: string
        description: Name of the task
      owners:
        type: array
        description: List of owner ids
        items:
          type: string
      administrators:
        type: array
        description: List of administrator ids
        items:
          type: string
      roles:
        type: array
        description: List of ids for roles which include this task
        items:
          type: string
      proposals:
        type: array
        description: List of ids for open proposals for this task
        items:
          type: string
      metadata:
        type: string
        description: Any client supplied metadata
  newTask:
    description: Details provided to create a new task
    type: object
    required:
      - name
      - administrators
    properties:
      name:
        type: string
        description: Name of the task
      administrators:
        type: array
        description: List of administrator ids
        items:
          type: string
      metadata:
        type: string
        description: Any client supplied metadata
  taskUpdate:
    description: Details provided to update an existing task
    type: object
    properties:
      name:
        type: string
        description: A new name for the task
      metadata:
        type: string
        description: Any new client supplied metadata
  user:
    description: An actor in the system who can take various authorizations
    type: object
    required:
      - id
      - name
      - managers
    properties:
      id:
        type: string
        description: Id of the user
      name:
        type: string
        description: Name of the user
      managers:
        type: array
        description: Ordered list of manager, manager's manager, etc
        items:
          type: string
      subordinates:
        type: array
        description: Unordered list of subordinates
        items:
          type: string
      ownerOf:
        type: array
        description: List of ids for roles and tasks this user is an owner of
        items:
          type: string
      administratorOf:
        type: array
        description: >-
          List of ids for roles and tasks this user is an administrator of
        items:
          type: string
      memberOf:
        type: array
        description: List of ids for roles this user is a member of
        items:
          type: string
      proposals:
        type: array
        description: List of ids for open proposals for this user
        items:
          type: string
      metadata:
        type: string
        description: Any client supplied metadata
  newUser:
    description: Details provided to create a new user
    type: object
    required:
      - name
      - manager
      - password
    properties:
      name:
        type: string
        description: Name of the user
      manager:
        type: string
        description: Id of the user's manager
      password:
        type: string
        description: Password to associate with the user's account
      email:
        type: string
        description: Email address to associate with the user's account
      metadata:
        type: string
        description: Any client supplied metadata
  userUpdate:
    description: Details provided to update an existing user
    type: object
    properties:
      name:
        type: string
        description: A new name for the user
      password:
        type: string
        description: A new password to associate with the user's account
      email:
        type: string
        description: A new email address to associate with the user's account
      metadata:
        type: string
        description: Any new client supplied metadata
  proposal:
    description: >-
      A request to change the state of a role, task, or user, which requires
      authorization from another party
    type: object
    required:
      - id
      - object
      - target
      - opener
      - status
      - approvers
    properties:
      id:
        type: string
        description: Id of the proposal
      type:
        $ref: '#/definitions/proposalType'
      object:
        type: string
        description: >-
          Id of the role, task, or user that the target resource is being
          added or removed from
      target:
        type: string
        description: >-
          Id of the role, task, or user that is being added or removed from
          the object resource
      status:
        $ref: '#/definitions/proposalStatus'
      opener:
        type: string
        description: Id of the user who created the proposal
      closer:
        type: string
      openReason:
        type: string
        description: >-
          A user supplied message explaining why the proposal was created
      closeReason:
        type: string
        description: >-
          A user supplied (upon accepting or rejecting proposal) message
          explaining why the proposal was closed
      approvers:
        type: array
        description: List of user ids that can approve this proposal
        items:
          type: string
  proposalStatus:
    description: The open/close status of a proposal
    type: object
    properties:
      status:
        type: string
        description: Status of the proposal
        enum:
          - OPEN
          - APPROVED
          - REJECTED
  proposalUpdate:
    description: Details provided to update a proposal
    type: object
    properties:
      status:
        type: string
        description: Status of the proposal
        enum:
          - OPEN
          - APPROVED
          - REJECTED
      reason:
        type: string
        description: >-
          A user supplied message explaining why the proposal was updated
      metadata:
        type: string
        description: Any new client metadata
  proposalType:
    description: What sort of state change a proposal is requesting
    type: object
    properties:
      proposal_type:
        type: string
        description: The type of the proposal
        enum:
          - ADD_ROLE_TASKS
          - ADD_ROLE_MEMBERS
          - ADD_ROLE_OWNERS
          - ADD_ROLE_ADMINS
          - REMOVE_ROLE_TASKS
          - REMOVE_ROLE_MEMBERS
          - REMOVE_ROLE_OWNERS
          - REMOVE_ROLE_ADMINS
          - ADD_TASK_OWNERS
          - ADD_TASK_ADMINS
          - REMOVE_TASK_OWNERS
          - REMOVE_TASK_ADMINS
          - UPDATE_USER_MANAGER
  block:
    properties:
      num:
        type: integer
        example: 123
      id:
        type: string
        example: 65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd
  authInfo:
    description: Info required to authenticate a user
    type: object
    properties:
      id:
        description: Id of user attempting to authenticate
        type: string
      password:
        type: string
        description: Password of user attempting to authenticate
  authToken:
    description: An token used to authorize later requests
    type: string
  400Error:
    description: Error definition for bad request
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 400
      message:
        type: string
        default: Bad Request
  401Error:
    description: Error definition for unauthorized request
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 403
      message:
        type: string
        default: Unauthorized
  403Error:
    description: Error definition for forbidden request
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 403
      message:
        type: string
        default: Forbidden
  404Error:
    description: Error definition for object not found error
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 404
      message:
        type: string
        default: Not Found
  503Error:
    description: Error definition for internal server error
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 503
      message:
        type: string
        default: Internal Error
  error:
    description: Generic error response with a code and message
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  success:
    description: Generic success response with a code and message
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
        default: 200
      message:
        type: string
        default: success
